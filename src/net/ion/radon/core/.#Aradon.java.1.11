package net.ion.radon.core;

import static net.ion.radon.core.RadonAttributeKey.*;

import java.io.File;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import net.ion.framework.util.Debug;
import net.ion.framework.util.InstanceCreationException;
import net.ion.framework.util.MapUtil;
import net.ion.framework.util.StringUtil;
import net.ion.radon.core.EnumClass.IZone;
import net.ion.radon.core.config.AttributeUtil;
import net.ion.radon.core.config.Releasable;
import net.ion.radon.core.config.XMLConfig;
import net.ion.radon.core.context.TreeContext;
import net.ion.radon.core.filter.FilterUtil;
import net.ion.radon.core.myapi.impl.RepositoryCentral;
import net.ion.radon.impl.section.DefaultSectionConfig;
import net.ion.radon.impl.section.SampleSecuritySection;

import org.apache.commons.configuration.ConfigurationException;
import org.restlet.Application;
import org.restlet.Component;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.data.Reference;
import org.restlet.resource.ResourceException;
import org.restlet.routing.Router;

import com.mongodb.Mongo;
import com.mongodb.MongoException;

public class Aradon extends Component {

	private Map<String, Application> sections = MapUtil.newCaseInsensitiveMap();
	private List<Releasable> releasables = new ArrayList<Releasable>();
	private TreeContext rootContext;

	private List<String> childConfigPath = new ArrayList<String>();
	public static ThreadLocal<DirConfig> DIR_LOCAL = new ThreadLocal<DirConfig>() ; 

	void setSection(String sectionName, Application section) {
		if (sections.containsKey(sectionName)) {
			Debug.warn("SECTION[" + sectionName + "] already exists. Ignored....======================");
		} else {
			Debug.debug("SECTION : ", sectionName, " loaded") ;
			sections.put(sectionName, section);
		}
	}

	public void init(final XMLConfig config) throws UnknownHostException, MongoException, SQLException, InstanceCreationException, ConfigurationException {
		this.rootContext = TreeContext.createRootContext(getDefaultHost());

		getStatusService().setContactEmail(config.findChild("context.attribute", "id", RadonAttributeKey.LET_CONTACT_EMAIL).getElementValue());
		getStatusService().setHomeRef(new Reference(config.findChild("context.attribute", "id", RadonAttributeKey.LET_CONTACT_HELP_DOC).getElementValue()));

		// at this point, the default class loader has all the jars you indicated

		ClassAppender appender = new ClassAppender();
		loadClassPath(config, appender);
		appender.invokeURL();

		rootContext.putAttribute(IZONE_ATTRIBUTE_KEY, IZone.Application);
		File currentDir = new File("./") ;
		init(currentDir, config, rootContext);
		Debug.line("ROOT loaded");
		for (String configPath : childConfigPath) {
			File file = new File(configPath);
			if (!file.exists()) {
				Debug.warn(file.getAbsolutePath() + " not exists. ignored");
				continue;
			}
			XMLConfig childConfig = XMLConfig.create(file);
			init(currentDir, childConfig, rootContext);
			Debug.line(configPath + " parsed");
		}

		super.setContext(this.rootContext);
	}

	public TreeContext getAradonContext() {
		return this.rootContext;
	}

	private void loadClassPath(XMLConfig rconfig, ClassAppender loader) throws ConfigurationException {
		List<XMLConfig> configs = rconfig.children("import");

		try {
			for (XMLConfig config : configs) {
				String configPath = config.getAttributeValue("path");
				final File file = new File(configPath);
				if (!file.exists()) {
					Debug.warn(file.getAbsolutePath() + " not exists. ignored");
					continue;
				} else if (childConfigPath.contains(configPath)) {
					Debug.warn(file.getAbsolutePath() + " recursived : infinite loop");
					continue;
				}

				childConfigPath.add(configPath);
				XMLConfig childConfig = XMLConfig.create(file);
				loadClassPath(childConfig, loader);
			}

			if (rconfig.hasChild("plugin")) {
				XMLConfig plugin = rconfig.firstChild("plugin");
				String[] paths = StringUtil.split(plugin.getAttributeValue("includepath"), ";");
				;
				String[] jars = plugin.childValueList("jar[@src]").toArray(new String[0]);

				loader.appendPath(paths);
				loader.appendJar(jars);
			}
		} catch (MalformedURLException ex) {
			throw new ConfigurationException(ex);
		}
	}

	private TreeContext init(File baseDir, XMLConfig config, TreeContext context) throws ConfigurationException, UnknownHostException, MongoException, SQLException,
			InstanceCreationException {

		DirConfig dc = DirConfig.create(baseDir) ;
		DIR_LOCAL.set(dc) ;
		
		AttributeUtil.load(this, context, config);
		FilterUtil.setFilter(context, config);
		setRepository(config, context);

		List<XMLConfig> sections = config.children("section");
		for (XMLConfig sconfig : sections) {
			TreeContext scontext = context.createChildContext();
			SectionService.create(this, sconfig.getAttributeValue("name"), DefaultSectionConfig.create(this, scontext, sconfig));
		}

		return context;
	}
	
	public void appendPlugin(File baseDir, XMLConfig config) throws Exception {
		this.init(baseDir, config, this.rootContext) ;
	} 
	
	

	public void handle(Request request, Response response) {
		try {
			FilterUtil.handlePreFilter(rootContext, request, response);
			super.handle(request, response);
			FilterUtil.handleAfterFilter(rootContext, request, response);
		} catch (ResourceException ex) {
			ex.printStackTrace();
			throw ex;
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
		}
	}

	public Application findSection(String key) {
		if (!sections.containsKey(key))
			throw new IllegalArgumentException("not found section : " + key);

		return sections.get(key);
	}

	private void setRepository(XMLConfig root, TreeContext context) throws UnknownHostException, MongoException {
		if (StringUtil.isNotBlank(root.getString("repository[@dbname]"))) {
			context.putAttribute(SYSTEM_REPOSITORY, RepositoryCentral.create(new Mongo()));
			context.putAttribute(REPOSITORY_DB_NAME, root.getString("repository[@dbname]"));
			Debug.debug(root.getString("repository[@dbname]") + " repository loaded");
		}
	}

	public void addReleasable(Releasable releasable) {
		releasables.add(releasable);
	}

	public void slayReleasable() {
		Debug.debug("Bye....... Aradon");
		for (Releasable releasable : releasables) {
			releasable.doRelease() ;
		}
	}

	public void stop() throws Exception {
		try {
			super.stop();
		} catch (Exception ignore) {
			ignore.printStackTrace();
		} finally {
			this.slayWorld();
		}
	}

	public void slayWorld() {
		slayReleasable();
		try {
			this.stopServices();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			this.stopRouters();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			this.stopServers();
		} catch (Exception e) {
			e.printStackTrace();
		}

		Debug.debug("End World.........");
	}

}
